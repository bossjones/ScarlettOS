[MASTER]
reports=no

# source: https://github.com/home-assistant/home-assistant/blob/dev/pylintrc
# Reasons disabled:
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# abstract-class-not-used - is flaky, should not show up but does
# unused-argument - generic callbacks and setup methods create a lot of warnings
# global-statement - used for the on-demand requirement installation
# redefined-variable-type - this is Python, we're duck typing!
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# logging-format-interpolation - (W1202): *Use % formatting in logging functions and pass the % parameters as arguments*
# invalid-name (C0103) - *Invalid %s name "%s"%s* Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).

# disable=
#   locally-disabled,
#   duplicate-code,
#   cyclic-import,
#   abstract-class-little-used,
#   abstract-class-not-used,
#   unused-argument,
#   global-statement,
#   redefined-variable-type,
#   too-many-arguments,
#   too-many-branches,
#   too-many-instance-attributes,
#   too-many-locals,
#   too-many-public-methods,
#   too-many-return-statements,
#   too-many-statements,
#   too-few-public-methods,
#   abstract-method,
#   locally-disabled,
#   abstract-method,
#   logging-format-interpolation,
#   invalid-name

[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"


disable=C0103,C0330,E0211,E0213,W0221,E0239,E0603,E0604,E0611,E1002,E1101,E1103,F0220,F0401,I0011,R0201,R0801,R0924,W0142,W0201,W0212,W0232,W0613,W0633,W0703,W1001


#:C0103 (invalid-name): *Invalid %s name "%s"*
#Used when the name doesn't match the regular expression associated to its type
#(constant, variable, class...). This message belongs to the basic checker.

#:C0330 bad-continuation: Wrong %s indentation%s.

#:E0211 Method has no argument

#:E0213 Method should have "self" as first argument

#:W0221 Arguments number differs from overridden '__call__' method

#:E0239 Inheriting 'Interface', which is not a class.

#:E0603(undefined-all-variable), ] Undefined variable name in __all__
# Complains when we have module.__name__ in __all__

#:E0604 (invalid-all-object): *Invalid object %r in __all__, must contain only strings*
#Used when an invalid (non-string) object occurs in __all__. This message belongs to the variables checker.

#:E0611 (no-name-in-module): *No name %r in module %r*
#Used when a name cannot be found in a module. This message belongs to the variables checker.

#:E1002 (super-on-old-class): *Use of super on an old style class*
#Used when an old style class uses the super builtin. This message belongs to the newstyle checker.

#:E1101 (no-member): *%s %r has no %r member*
#Used when a variable is accessed for an unexistent member. This message belongs to the typecheck checker.

#:E1103 (maybe-no-member): *%s %r has no %r member (but some types could not be inferred)*
#Used when a variable is accessed for an unexistent member, but astroid was not
#able to interpret all possible types of this variable. This message belongs to the typecheck checker.

#:F0220 (unresolved-interface): *failed to resolve interfaces implemented by %s (%s)*
#Used when a PyLint as failed to find interfaces implemented by a class This message belongs to the classes checker.

#:F0401 (import-error): *Unable to import %s*
#Used when pylint has been unable to import a module. This message belongs to the imports checker.

#:I0011 (locally-disabled): Locally disabling %s
# Used when an inline option disables a message or a messages category.

#:R0201 (no-self-use): *Method could be a function*
#Used when a method doesn't use its bound instance, and so could be written as
#a function. This message belongs to the classes checker.

#:R0801 (duplicate-code): *Similar lines in %s files*
#Indicates that a set of similar lines has been detected among multiple file.
#This usually means that the code should be refactored to avoid this
#duplication. This message belongs to the similarities checker.

#:R0924 (incomplete-protocol): *Badly implemented %s, implements %s but not %s*
#A class implements some of the special methods for a particular protocol, but
#not all of them This message belongs to the design checker.

#:W0142 (star-args): *Used * or ** magic*
#Used when a function or method is called using `*args` or `**kwargs` to
#dispatch arguments. This doesn't improve readability and should be used with
#care. This message belongs to the basic checker.

#:W0201 (attribute-defined-outside-init): *Attribute %r defined outside __init__*
#Used when an instance attribute is defined outside the __init__ method. This message belongs to the classes checker.

#:W0212 (protected-access): *Access to a protected member %s of a client class*
#Used when a protected member (i.e. class member with a name beginning with an
#underscore) is access outside the class or a descendant of the class where
#it's defined. This message belongs to the classes checker.

#:W0232 (no-init): *Class has no __init__ method*
#Used when a class has no __init__ method, neither its parent classes. This message belongs to the classes checker.

#:W0613 (unused-argument): *Unused argument %r*
#Used when a function or method argument is not used. This message belongs to the variables checker.

#:W0633 (unpacking-non-sequence): Attempting to unpack a non-sequence%s
#Used when something which is not a sequence is used in an unpack assignment

#:W0703 (broad-except): *Catching too general exception %s*
#Used when an except catches a too general exception, possibly burying
#unrelated errors. This message belongs to the exceptions checker.

#:W1001 (property-on-old-class): *Use of "property" on an old style class*
#Used when PyLint detect the use of the builtin "property" on an old style
#class while this is relying on new style classes features This message belongs to the newstyle checker.

[EXCEPTIONS]
overgeneral-exceptions=Exception,ScarlettError

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=200

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string='    '
